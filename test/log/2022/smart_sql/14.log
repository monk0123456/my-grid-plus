(def line "function getFirst (sql, args)\n{\n   let lst = query_sql(sql, args);\n   innerFunction {\n       function notNil(rs)\n       {\n           match {\n              rs <> nil:\n                        log(\"执行成功！\");\n                        true;\n              else\n                  false;\n           }\n       }\n\n       function myCase(rs)\n       {\n           match {\n              rs.nth(1) == true: true;\n              else\n                   false;\n           }\n       }\n   }\n   for (rs in lst)\n   {\n      match {\n         (notNil(rs)):\n                       log(\"wudafu\");\n                       rs;\n         my-case(rs):\n                       log(\"这个是例子\");\n                        a+b;\n         else\n                       println(\"吴大富是帅哥！\");\n      }\n      break;\n   }\n}")

(defn lst-to-token [lst]
    (cond (and (my-lexical/is-eq? (first lst) "let") (= (second (rest lst)) "=")) (let [my-let-vs (my-select-plus/sql-to-ast (rest (rest (rest lst))))]
                                                                                      {:let-name (second lst) :let-vs my-let-vs})
          (my-lexical/is-eq? (first lst) "else") {:else-vs (my-select-plus/sql-to-ast (rest lst))}
          (my-lexical/is-eq? (first lst) "break") {:break-vs true}
          :else
          (let [pair-item (split-pair-item lst)]
              (cond (= (count pair-item) 2) {:pair (my-select-plus/sql-to-ast (first pair-item)) :pair-vs (my-select-plus/sql-to-ast (second pair-item))}
                    (= (count pair-item) 1) {:express (my-select-plus/sql-to-ast (first pair-item))}
                    :else
                    (throw (Exception. "match 中的判断要成对出现！"))
                    ))
          ))

(defn body-segment
    ([lst] (body-segment lst [] []))
    ([[f & r] stack-lst lst]
     (if (some? f)
         (cond (and (empty? stack-lst) (my-lexical/is-eq? f "for") (= (first r) "(")) (let [{args-lst :args-lst body-lst :body-lst} (my-smart-sql/get-small r)]
                                                                                          (if-not (empty? body-lst)
                                                                                              (let [{big-lst :big-lst rest-lst :rest-lst} (my-smart-sql/get-big body-lst)]
                                                                                                  (recur rest-lst [] (conj lst {:expression "for" :args (my-smart-sql/get-for-in-args args-lst) :body (body-segment big-lst)})))))
               (and (empty? stack-lst) (my-lexical/is-eq? f "match") (= (first r) "{")) (let [{big-lst :big-lst rest-lst :rest-lst} (my-smart-sql/get-big r)]
                                                                                            (recur rest-lst [] (conj lst {:expression "match" :pairs (my-smart-sql/my-re-match (body-segment big-lst))})))
               (and (empty? stack-lst) (my-lexical/is-eq? f "innerFunction") (= (first r) "{")) (let [{big-lst :big-lst rest-lst :rest-lst} (my-smart-sql/get-big r)]
                                                                                                    (recur rest-lst [] (conj lst {:functions (my-smart-sql/get-ast-lst big-lst)})))
               (= f ";") (recur r [] (conj lst (lst-to-token stack-lst)))
               :else
               (recur r (conj stack-lst f) lst)
               )
         lst)))

(defn get-ast-lst [lst]
    (let [{func-name :func-name  args-lst :args-lst body-lst :body-lst} (my-smart-sql/get-func-name lst)]
        (let [{big-lst :big-lst rest-lst :rest-lst} (my-smart-sql/get-big body-lst)]
            (println rest-lst)
            (if-not (nil? rest-lst)
                (concat [{:func-name func-name :args-lst args-lst :body-lst (body-segment big-lst)}] (get-ast-lst rest-lst))
                (if (nil? func-name)
                    (throw (Exception. "smart sql 程序有误！"))
                    [{:func-name func-name :args-lst args-lst :body-lst (body-segment big-lst)}])
                ))))

(get-ast-lst (my-lexical/to-back line))