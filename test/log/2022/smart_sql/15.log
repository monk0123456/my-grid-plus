(def lst (my-lexical/to-back line))

(defn get-items
    ([lst] (get-items lst [] nil [] []))
    ([[f & r] stack mid-small stack-lst lst]
     (if (some? f)
         (cond (= f "(") (if (= mid-small "mid")
                             (recur r stack mid-small (conj stack-lst f) lst)
                             (recur r (conj stack f) "small" (conj stack-lst f) lst))
               (= f "[") (if (= mid-small "small")
                             (recur r stack mid-small (conj stack-lst f) lst)
                             (recur r (conj stack f) "mid" (conj stack-lst f) lst))
               (= f ")") (cond (and (= (count stack) 1) (= mid-small "small")) (recur r [] nil (conj stack-lst f) lst)
                               (and (> (count stack) 1) (= mid-small "small")) (recur r (pop stack) "small" (conj stack-lst f) lst)
                               (not (= mid-small "small")) (recur r stack mid-small (conj stack-lst f) lst)
                             )
               (= f "]") (cond (and (= (count stack) 1) (= mid-small "mid")) (recur r [] nil (conj stack-lst f) lst)
                               (and (> (count stack) 1) (= mid-small "mid")) (recur r (pop stack) "mid" (conj stack-lst f) lst)
                               (not (= mid-small "mid")) (recur r stack mid-small (conj stack-lst f) lst)
                               )
               (= f ",") (if (and (nil? mid-small) (empty? stack) (not (empty? stack-lst)))
                             (recur r [] nil [] (conj lst stack-lst))
                             (recur r stack mid-small (conj stack-lst f) lst))
               :else
               (recur r stack mid-small (conj stack-lst f) lst)
               )
         (if-not (empty? stack-lst)
             (conj lst stack-lst)
             lst))))

(defn get-item-tokens [lst]
    (loop [[f & r] (get-items (my-lexical/get-contain-lst lst)) lst-rs []]
        (if (some? f)
            (cond (and (= (first f) "[") (= (last f) "]")) (recur r (conj lst-rs (get-item-tokens f)))
                  :else
                  (recur r (conj lst-rs (my-select-plus/sql-to-ast f))))
            lst-rs)))
(get-item-tokens lst)
;(get-items (my-lexical/get-contain-lst lst))