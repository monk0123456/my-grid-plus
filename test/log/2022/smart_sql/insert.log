(def lst-sql (my-lexical/to-back sql))
(def insert_obj (my-insert/get_insert_obj lst-sql))
(def pk_data (my-insert/get_pk_data ignite (-> insert_obj :table_name)))
(def pk_with_data (my-insert/get_pk_data_with_data pk_data insert_obj))
(my-insert/get_pk_data_with_data pk_data insert_obj)

(defn insert_obj_to_db [^Ignite ignite ^Long group_id ^String schema_name ^String table_name ^clojure.lang.PersistentArrayMap pk_data]
    (let [{pk_rs :pk_rs data_rs :data_rs} pk_data]
        (letfn [(get_binaryObject_pk [^BinaryObjectBuilder builder [f & r] ^List lst]
                    (if (some? f)
                        (let [key (format "%s_pk" (-> f :column_name)) value (my-lexical/get_jave_vs (-> f :column_type) (my-expression/plus_value ignite group_id (-> f :column_type) (-> f :item_value)))]
                            (recur (doto builder (.setField key value)) r (doto lst (.add (MyKeyValue. key value)))))
                        [builder lst]))
                (get_binaryObject [^BinaryObjectBuilder builder [f & r] ^List lst]
                    (if (some? f)
                        (let [key (-> f :column_name) value (my-lexical/get_jave_vs (-> f :column_type) (my-expression/plus_value ignite group_id (-> f :column_type) (-> f :item_value)))]
                            (recur (doto builder (.setField key value)) r (doto lst (.add (MyKeyValue. key value)))))
                        [builder lst]))
                (get_pk_rs [pk]
                    (cond (= (count pk) 1) (cond (true? (-> (first pk) :auto_increment)) (if (re-find #"^(?i)integer$|^(?i)int$" (-> (first pk) :column_type))
                                                                                             (MyConvertUtil/ConvertToInt (.incrementAndGet (.atomicSequence ignite (format "f_%s_%s" schema_name table_name) 0 true)))
                                                                                             (.incrementAndGet (.atomicSequence ignite (format "f_%s_%s" schema_name table_name) 0 true)))
                                                 (false? (-> (first pk) :auto_increment)) (my-lexical/get_jave_vs (-> (first pk) :column_type) (my-expression/plus_value ignite group_id (-> (first pk) :column_type) (-> (first pk) :item_value)))
                                                 )
                          (> (count pk) 1) (if-let [keyBuilder (.builder (.binary ignite) (KvSql/getKeyType ignite (format "f_%s_%s" schema_name table_name)))]
                                               (get_binaryObject_pk keyBuilder pk (ArrayList.))
                                               (throw (Exception. "表不存在主键！")))
                          :else
                          (throw (Exception. "表不存在主键！"))
                          ))
                (get_data_rs [data pk]
                    (if-let [valueBuilder (.builder (.binary ignite) (KvSql/getValueType ignite (format "f_%s_%s" schema_name table_name)))]
                        (cond (= (count pk) 1) (get_binaryObject valueBuilder data (ArrayList.))
                              (> (count pk) 1) (get_binaryObject valueBuilder (concat (my-insert/get_plus_pk pk) data) (ArrayList.))
                              :else
                              (throw (Exception. "表不存在主键！")))
                        (throw (Exception. "表不存在主键！"))))
                ]
            (do
                (println (get_data_rs data_rs pk_rs))
                (let [log_id (.incrementAndGet (.atomicSequence ignite "my_log" 0 true)) pk (get_pk_rs pk_rs) data (get_data_rs data_rs pk_rs)]
                    (if (vector? pk)
                        [(MyCacheEx. (.cache ignite (format "f_%s_%s" schema_name table_name)) (.build (nth pk 0)) (.build (nth data 0)) (SqlType/INSERT))
                         ;(MyCacheEx. (.cache ignite "my_log") log_id (MyLog. (str log_id) (format "%s.%s" schema_name table_name) (MyCacheExUtil/objToBytes (MyLogCache. (format "f_%s_%s" schema_name table_name) (nth pk 1) (nth data 1) (SqlType/INSERT)))) (SqlType/INSERT))
                         ]
                        [(MyCacheEx. (.cache ignite (format "f_%s_%s" schema_name table_name)) pk (.build (nth data 0)) (SqlType/INSERT))
                         ;(MyCacheEx. (.cache ignite "my_log") log_id (MyLog. (str log_id) (format "%s.%s" schema_name table_name) (MyCacheExUtil/objToBytes (MyLogCache. (format "f_%s_%s" schema_name table_name) pk (nth data 1) (SqlType/INSERT)))) (SqlType/INSERT))
                         ])
                    ))
            ))
    )

(insert_obj_to_db ignite 2 (-> insert_obj :schema_name) (-> insert_obj :table_name) pk_with_data)
(my-insert/get_pk_data_with_data pk_data insert_obj)