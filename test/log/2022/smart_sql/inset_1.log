(declare get_binaryObject_pk get_binaryObject get_pk_rs get_data_rs)

(def sql "INSERT INTO wudagui.Orders (OrderID, CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, ShipVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry) Values ('10248','VINET',5,'1996-07-04 00:00:00.000','1996-08-01 00:00:00.000','1996-07-16 00:00:00.000',3,32.38,'Vins et alcools Chevalier','59 rue de l-Abbaye','Reims',NULL,'51100','France')")
(def lst-sql (my-lexical/to-back sql))
(def insert_obj (my-insert/get_insert_obj lst-sql))
(def schema_name (-> insert_obj :schema_name))
(def table_name (-> insert_obj :table_name))
(def pk_data (my-insert/get_pk_data ignite (-> insert_obj :table_name)))
(def pk_with_data (my-insert/get_pk_data_with_data pk_data insert_obj))

(def group_id (first (my-super-sql/get_group_id ignite "wudafu")))

(defn get_binaryObject_pk [^BinaryObjectBuilder builder [f & r] ^List lst]
    (if (some? f)
        (let [key (format "%s_pk" (-> f :column_name)) value (my-lexical/get_jave_vs (-> f :column_type) (my-expression/plus_value ignite group_id (-> f :column_type) (-> f :item_value)))]
            (recur (doto builder (.setField key value)) r (doto lst (.add (MyKeyValue. key value)))))
        [builder lst]))
(defn get_binaryObject [^BinaryObjectBuilder builder [f & r] ^List lst]
    (if (some? f)
        (do
            (println (format "%s: %s: %s" (-> f :column_name) (-> f :column_type) (str (-> f :item_value))))
            (let [key (-> f :column_name) value (my-lexical/get_jave_vs (-> f :column_type) (my-expression/plus_value ignite group_id (-> f :column_type) (-> f :item_value)))]
                (recur (doto builder (.setField key value)) r (doto lst (.add (MyKeyValue. key value))))))
        [builder lst]))
(defn get_pk_rs [pk]
    (cond (= (count pk) 1) (cond (true? (-> (first pk) :auto_increment)) (if (re-find #"^(?i)integer$|^(?i)int$" (-> (first pk) :column_type))
                                                                             (MyConvertUtil/ConvertToInt (.incrementAndGet (.atomicSequence ignite (format "f_%s_%s" schema_name table_name) 0 true)))
                                                                             (.incrementAndGet (.atomicSequence ignite (format "f_%s_%s" schema_name table_name) 0 true)))
                                 (false? (-> (first pk) :auto_increment)) (my-lexical/get_jave_vs (-> (first pk) :column_type) (my-expression/plus_value ignite group_id (-> (first pk) :column_type) (-> (first pk) :item_value)))
                                 )
          (> (count pk) 1) (if-let [keyBuilder (.builder (.binary ignite) (KvSql/getKeyType ignite (format "f_%s_%s" schema_name table_name)))]
                               (get_binaryObject_pk keyBuilder pk (ArrayList.))
                               (throw (Exception. "表不存在主键！")))
          :else
          (throw (Exception. "表不存在主键！"))
          ))
(defn get_data_rs [data pk]
    (if-let [valueBuilder (.builder (.binary ignite) (KvSql/getValueType ignite (format "f_%s_%s" schema_name table_name)))]
        (cond (= (count pk) 1) (get_binaryObject valueBuilder data (ArrayList.))
              (> (count pk) 1) (get_binaryObject valueBuilder (concat (my-insert/get_plus_pk pk) data) (ArrayList.))
              :else
              (throw (Exception. "表不存在主键！")))
        (throw (Exception. "表不存在主键！"))))

(def pk_rs (-> pk_with_data :pk_rs))
(def data_rs (-> pk_with_data :data_rs))
;(-> pk_with_data :pk_rs)
;(-> pk_with_data :data_rs)
(get_data_rs data_rs pk_rs)


(def sql "select m.column_name, m.column_type, m.pkid, m.auto_increment from table_item as m, my_meta_tables as t, my_dataset as ds where m.table_id = t.id and ds.id = t.data_set_id and t.table_name = ? and ds.dataset_name = ?")
(.getAll (.query (.cache ignite "table_item") (.setArgs (SqlFieldsQuery. sql) (to-array [(str/lower-case "EmployeeTerritories") "wudafu"]))))


(def sql "delete my_meta_tables where id in (7001, 7003, 5001, 6001)")
(.getAll (.query (.cache ignite "my_meta_table") (SqlFieldsQuery. sql)))
(def sql "delete table_item where table_id in (7001, 7003, 5001, 6001)")
(.getAll (.query (.cache ignite "my_meta_table") (SqlFieldsQuery. sql)))