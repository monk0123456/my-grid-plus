(def line "function my_match(table_name)\n{\n   match {\n     table_name == \"Customers\": query_sql(\"select * from public.Customers limit 0, 5\");\n     table_name == \"Employees\": query_sql(\"select * from wudafu.Employees limit 0, 5\");\n     else query_sql(\"select * from wudagui.OrderDetails limit 0, 5\");\n   }\n}")
(def ast (first (my-smart-sql/get-ast line)))
(def my-context {:input-params #{} :let-params {} :last-item nil :inner-func #{} :up-my-context nil})
(def func-context (assoc my-context :input-params (apply conj (-> my-context :input-params) (-> ast :args-lst))))
ast
(my-smart-clj/body-to-clj ignite 0 ast func-context)
(my-smart-clj/ast-to-clj ignite 0 ast func-context)


(def line "function my_match(table_name)\n{\n   match {\n     table_name == \"Customers\": query_sql(\"select * from public.Customers limit 0, 5\");\n     table_name == \"Employees\": query_sql(\"select * from wudafu.Employees limit 0, 5\");\n     else query_sql(\"select * from wudagui.OrderDetails limit 0, 5\");\n   }\n}")
(my-smart-clj/smart-to-clj ignite 0 line)


function my_trans(OrderID, CustomerID)
{
   lst.add(["INSERT INTO wudagui.Orders (OrderID, CustomerID) Values (?, ?);", [OrderID, CustomerID]);
}

(def line "function my_test()\n{\n   match{\n                   my_lst.nth(i) > my_lst.nth(j):\n                                                   tmp = my_lst.nth(i);\n                                                   my_lst.set(i,  my_lst.nth(j));\n                                                   my_lst.set(j,  tmp);\n               }\n}")
(def ast (first (my-smart-sql/get-ast line)))
(def my-context {:input-params #{} :let-params {} :last-item nil :inner-func #{} :up-my-context nil})
(def func-context (assoc my-context :input-params (apply conj (-> my-context :input-params) (-> ast :args-lst))))
ast
(my-smart-clj/body-to-clj ignite 0 (-> ast :body-lst) func-context)
(my-smart-clj/ast-to-clj ignite 0 ast func-context)





(def lst-match (my-lexical/to-back "(notEmpty?(rs.nth(0)) and notEmpty?(rs.nth(1))): concat(quickSort(rs.nth(0)), [lst.first()], quickSort(rs.nth(1)));\n        (notEmpty?(rs.nth(0)) and empty?(rs.nth(1))): concat(quickSort(rs.nth(0)), [lst.first()]);\n        (empty?(rs.nth(0)) and notEmpty?(rs.nth(1))): concat([lst.first()], quickSort(rs.nth(1)));\n        else [lst.first()]"))
(my-smart-sql/split-pair-item-ex lst-match)











































