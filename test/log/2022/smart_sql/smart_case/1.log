// 1、 例子：简单的四则运算
function my_test(a, b)
{
   let c = 10;
   let d = [1, 2+3*4];
   let tmp = c + d.get(1);
   log("简单的四则运算");
   a + b + tmp;
}

// 2、 例子：for 循环
function my_for(sql, args)
{
   let lst = query_sql(sql, args);
   for (r in lst)
   {
       println(r.get(0));
   }
}

// 3、 例子：match 循环
function my_match(table_name)
{
   match {
     table_name == "Customers": query_sql("select * from public.Customers limit 0, 5");
     table_name == "Employees": query_sql("select * from wudafu.Employees limit 0, 5");
     else query_sql("select * from wudagui.OrderDetails limit 0, 5");
   }
}

// 4、例子：事务
// 同时添加订单，订单详情表，修改产品表的库存
function my_trans(OrderID, CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, ShipVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry, lst_OrderDetails)
{
   let lst = [];
   -- 1、保存订单信息
   lst.add(["INSERT INTO wudagui.Orders (OrderID, CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, ShipVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry) Values ((?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))"], [OrderID, CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, ShipVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry]);
   -- 2、保存订单详情
   for(rs in lst_OrderDetails)
   {
      lst.add(["INSERT INTO wudagui.OrderDetails (OrderID, ProductID, UnitPrice, Quantity, Discount) Values (?, ?, ?, ?, ?)"], [OrderID, rs.get("ProductID"), rs.get("UnitPrice"), rs.get("Quantity"), rs.get("Discount")]);
      -- 3、修改库存
      lst.add(["update public.Products set UnitsInStock = UnitsInStock - ? where ProductID = ?"], [rs.get("UnitPrice"), rs.get("ProductID")]);
   }

   -- 4、执行事务
   trans(lst);
}

// 5、子方法
function my_inner_func (a, b)
{
    -- 1、定义个子方法，类似于 java 类中的方法，只是这个子方法是 private 的
    innerFunction {
        function my_add(a, b)
        {
           lpg("测试 a + b");
           a + b;
        }

        function my_sub(a, b)
        {
           lpg("测试 a - b");
           a - b;
        }
    }

    let c = my_add(a, b) * my_sub(a, b);
    c + 10;
}

function my_no_sql()
{
   let insert = {table_name: "表名", key: "G350_成都东_北京西", value: [{token: "B001", price: 778}, {token: "B002", price: 778}, {token: "B003", price: 778}, {token: "B004", price: 1246}, {token: "B005", price: 1246}]};
   query_sql(myInert(insert));
}

function my_no_sql()
{
   let insert = {table_name: "表名"};
   query_sql(myInert(insert));
}

// 6、对 no sql 的支持
// 6.1、保存到 no sql
query_sql(myInsert({table_name: "表名", key: "G350_成都东_北京西", value: [{token: "B001", price: 778}, {token: "B002", price: 778}, {token: "B003", price: 778}, {token: "B004", price: 1246}, {token: "B005", price: 1246}]}));

// 6.2、修改 no sql
query_sql(myUpdate({table_name: "表名", key: "G350_成都东_北京西", value: [{token: "B001", price: 778}, {token: "B002", price: 778}, {token: "B003", price: 778}, {token: "B004", price: 1246}, {token: "B005", price: 1246}]}));

// 6.3、删除 no sql
query_sql(myDelete({table_name: "表名", key: "G350_成都东_北京西"}));

// 6.4、删除 no sql table
query_sql(myDelete({table_name: "表名"}));





















































