(defn split-pair-item-ex
    ([lst] (split-pair-item-ex lst [] nil [] [] []))
    ([[f & r] stack mid-small stack-lst k-v lst]
     (if (some? f)
         (cond (= f "(") (if (or (= mid-small "mid") (= mid-small "big"))
                             (recur r stack mid-small (conj stack-lst f) k-v lst)
                             (recur r (conj stack f) "small" (conj stack-lst f) k-v lst))
               (= f "[") (if (or (= mid-small "small") (= mid-small "big"))
                             (recur r stack mid-small (conj stack-lst f) k-v lst)
                             (recur r (conj stack f) "mid" (conj stack-lst f) k-v lst))
               (= f "{") (if (or (= mid-small "mid") (= mid-small "small"))
                             (recur r stack mid-small (conj stack-lst f) k-v lst)
                             (recur r (conj stack f) "big" (conj stack-lst f) k-v lst))
               (= f ")") (cond (and (= (count stack) 1) (= mid-small "small")) (recur r [] nil (conj stack-lst f) k-v lst)
                               (and (> (count stack) 1) (= mid-small "small")) (recur r (pop stack) "small" (conj stack-lst f) k-v lst)
                               (not (= mid-small "small")) (recur r stack mid-small (conj stack-lst f) k-v lst)
                               )
               (= f "]") (cond (and (= (count stack) 1) (= mid-small "mid")) (recur r [] nil (conj stack-lst f) k-v lst)
                               (and (> (count stack) 1) (= mid-small "mid")) (recur r (pop stack) "mid" (conj stack-lst f) k-v lst)
                               (not (= mid-small "mid")) (recur r stack mid-small (conj stack-lst f) k-v lst)
                               )
               (= f "}") (cond (and (= (count stack) 1) (= mid-small "big")) (recur r [] nil (conj stack-lst f) k-v lst)
                               (and (> (count stack) 1) (= mid-small "big")) (recur r (pop stack) "big" (conj stack-lst f) k-v lst)
                               (not (= mid-small "big")) (recur r stack mid-small (conj stack-lst f) k-v lst)
                               )
               (= f ":") (if (and (nil? mid-small) (empty? stack) (not (empty? stack-lst)))
                             (if (empty? k-v)
                                 (recur r [] nil [] (conj k-v stack-lst) lst)
                                 )
                             (recur r stack mid-small (conj stack-lst f) k-v lst))
               (my-lexical/is-eq? f "else") (if (and (nil? mid-small) (empty? stack) (not (empty? stack-lst)))
                                                (recur r [] nil [] (conj lst stack-lst ["else"]))
                                                (recur r stack mid-small (conj stack-lst f) k-v lst))
               :else
               (recur r stack mid-small (conj stack-lst f) k-v lst)
               )
         (if-not (empty? stack-lst)
             (conj lst stack-lst)
             lst))))